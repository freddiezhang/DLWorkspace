@{
    ViewData["Title"] = "Submit Your Job";
}

<script>
    $(document).ready(function () {
        $('#submit_job').on('submit', function (e) { //use on if jQuery 1.7+
            e.preventDefault();  //prevent form from submitting
            var params = "";

            var jobname = $("#jobname").val().trim();
            var workpath = encodeURIComponent($("#workpath").val().trim());
            var datapath = encodeURIComponent($("#datapath").val().trim());
            var jobpath = encodeURIComponent($("#jobpath").val().trim());
            var image = encodeURIComponent($("#image").val().trim());
            var cmd = encodeURIComponent($("#cmd").val().trim());
            var logdir = encodeURIComponent($("#logdir").val().trim());
            var interactiveport = encodeURIComponent($("#interactivePort").val().trim());


            var numGPUsInt = parseInt($('#resourcegpu').val());
            var numGPUStr = $('#resourcegpu').val();


            //var jobtrainingtype = encodeURIComponent($("#jobtrainingtype").val().trim());


            var radios = document.getElementsByName('jobtrainingtype');

            for (var i = 0, length = radios.length; i < length; i++) {
                if (radios[i].checked) {
                    var jobtrainingtype = encodeURIComponent(radios[i].value.trim());
                    break;
                }
            }

            var numps = parseInt($('#numps').val());
            var numpsworker = parseInt($('#numpsworker').val());
            var nummpiworker = parseInt($('#nummpiworker').val());


            if (numGPUsInt < 0 || numGPUsInt > 8) {
                alert("Invalid GPU number:" + numGPUStr + ". GPU number has to be 0 - 8 in regular job");
                return;
            }

            if (jobname == "") {
                alert("Job Name cannot be empty!");
                return;
            }
            if (workpath == "") {
                alert("Work Path cannot be empty!");
                return;
            }
            if (datapath == "") {
                alert("Data Path cannot be empty!");
                return;
            }

            if (image == "") {
                alert("Docker Image cannot be empty!");
                return;
            }

            if (cmd == "") {
                alert("Default CMD in docker image:" + image + ". will be executed");
            }

            params = params + "resourcegpu=" + numGPUStr + "&";
            params = params + "jobName=" + jobname + "&";
            params = params + "workPath=" + workpath + "&";
            params = params + "dataPath=" + datapath + "&";

            var jobpath = $('#jobpath').val();
            if (jobpath != "") {
                params = params + "jobPath=" + jobpath + "&";
            }

            params = params + "image=" + image + "&";
            params = params + "cmd=" + cmd + "&";

            var logdir = $('#logdir').val();
            if (logdir != "") {
                params = params + "logDir=" + logdir + "&";
            }

            if (interactiveport != "") {
                params = params + "interactivePort=" + interactiveport + "&";
            }

            params = params + "jobType=training&";
            params = params + "jobtrainingtype=" + jobtrainingtype+"&";

            if (jobtrainingtype == "PSDistJob")
            {
                params = params + "numps=" + numps + "&";
                params = params + "numpsworker=" + numpsworker+"&";
            }

            if (jobtrainingtype == "MPIDistJob") {
                params = params + "nummpiworker=" + nummpiworker + "&";
            }



            var runningasroot = document.getElementById("runningasroot").checked ? "1" : "0";
            params = params + "runningasroot=" + runningasroot + "&";

            var url = "/api/dlws/SubmitJob?" + params;

            console.log(url);
            $("#submit").attr("disabled", true);

            $.ajax({
                url: url,
                dataType: 'json',
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("RestfulAPI error!");
                    $("#submit").attr("disabled", false);
                },
                timeout: 10000 //10 second timeout
            }).done(
                function (payload) {
                    console.log(payload);
                    if (payload.jobId) {
                        alert("Job Submitted! \n Job ID:" + payload.jobId)
                        location.href = "/Home/ViewJobs";
                    } else if (payload.error) {
                        alert("Error: " + payload.error, "Alert");
                        $("#submit").attr("disabled", false);
                    } else {
                        alert("Unexpected error: " + payload, "Alert");
                        $("#submit").attr("disabled", false);
                    }

                });

        });
    });
</script>

<script type="text/javascript">
    function ShowHideDiv(chkbox, divId) {
        var elem = document.getElementById(divId);
        elem.style.display = chkbox.checked ? "block" : "none";
    }
    function ShowRegularJob() {

        var elem2 = document.getElementById("PSDistJob");
        elem2.style.display = "none";


    }
    function ShowPSDistJob() {

        var elem2 = document.getElementById("PSDistJob");
        elem2.style.display = "block";

    }

    function serializeSchema(form) {
        return [].map.call(form.elements, function (el) {
            return {
                type: el.type,
                name: el.id,
                value: el.value,
                checked: el.checked
            };
        });
    };


    function SaveTemplate() {
        var f = document.getElementById("submit_job");
        var schema = JSON.stringify(serializeSchema(f));
        console.log(schema);
        var file = new Blob([schema], { type: "text/plain" });


        var filename = "template.json";
        if (window.navigator.msSaveOrOpenBlob) // IE10+
            window.navigator.msSaveOrOpenBlob(file, filename);
        else { // Others
            var a = document.createElement("a"),
                url = URL.createObjectURL(file);
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            setTimeout(function () {
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            }, 0);
        }
    }


    function LoadTemplate(templateData)
    {
        for (var i = 0; i < templateData.length; i++) {
            console.log(templateData[i].name);
            try {
                if (templateData[i].type == "checkbox") {
                    var elem = document.getElementById(templateData[i].name);
                    elem.checked = templateData[i].checked;
                }
                else if (templateData[i].type == "text" || templateData[i].type == "number" || templateData[i].type == "textarea") {
                    var elem = document.getElementById(templateData[i].name);
                    elem.value = templateData[i].value;
                }
                else if (templateData[i].type == "radio") {
                    //TODO: take care of job type
                }
            }
            catch (e) {
                console.log(e);
            }
        }
        ShowHideDiv(document.getElementById("chkInteractiveJob"), 'interactiveportfield')
        ShowHideDiv(document.getElementById("chkLogDir"), 'logdirfield')

    }

    function loadFileAsText() {
        var fileToLoad = document.getElementById("fileToLoad").files[0];

        var fileReader = new FileReader();
        fileReader.onload = function (fileLoadedEvent) {
            var textFromFileLoaded = fileLoadedEvent.target.result;
            //document.getElementById("inputTextToSave").value = textFromFileLoaded;

            var templateData = JSON.parse(textFromFileLoaded);

            LoadTemplate(templateData);

        }
        fileReader.readAsText(fileToLoad, "UTF-8");

    }

    function UseTemplate(id) {
        if (id == "tensorflow") {
            document.getElementById("jobname").value = "tensorflow-ipython";
            document.getElementById("resourcegpu").value = 1;
            document.getElementById("workpath").value = "@ViewData["Username"]";
            document.getElementById("datapath").value = "imagenet";
            document.getElementById("jobpath").value = "";

            document.getElementById("image").value = "mlcloudreg.westus.cloudapp.azure.com:5000/philly/agi-default-tf1.9.0-py36-gpu:latest";
            //document.getElementById("cmd").value = "";
            document.getElementById("cmd").value = "export HOME=/job && /usr/local/anaconda3/bin/jupyter notebook --no-browser --port=8888 --ip=0.0.0.0 --notebook-dir=/";

            document.getElementById("chkInteractiveJob").checked = true;
            document.getElementById("chkLogDir").checked = false;
            ShowHideDiv(document.getElementById("chkInteractiveJob"), 'interactiveportfield')
            ShowHideDiv(document.getElementById("chkLogDir"), 'logdirfield')

            document.getElementById("interactivePort").value = "8888";
            document.getElementById("logdir").value = "";


            document.getElementById("runningasroot").checked = false;
        }
        else if (id == "tensorflowcpu") {
            document.getElementById("jobname").value = "tensorflow-ipython-cpu";
            document.getElementById("resourcegpu").value = 0;
            document.getElementById("workpath").value = "@ViewData["Username"]";
            document.getElementById("datapath").value = "imagenet";
            document.getElementById("jobpath").value = "";

            document.getElementById("image").value = "tensorflow/tensorflow:latest";
            //document.getElementById("cmd").value = "";
            document.getElementById("cmd").value = "export HOME=/job && jupyter notebook --no-browser --port=8888 --ip=0.0.0.0 --notebook-dir=/";

            document.getElementById("chkInteractiveJob").checked = true;
            document.getElementById("chkLogDir").checked = false;
            ShowHideDiv(document.getElementById("chkInteractiveJob"), 'interactiveportfield')
            ShowHideDiv(document.getElementById("chkLogDir"), 'logdirfield')

            document.getElementById("interactivePort").value = "8888";
            document.getElementById("logdir").value = "";


            document.getElementById("runningasroot").checked = false;
        }
        else if (id == "tensorflowssh") {
            document.getElementById("jobname").value = "tensorflow-ssh";
            document.getElementById("resourcegpu").value = 0;
            document.getElementById("workpath").value = "@ViewData["Username"]";
            document.getElementById("datapath").value = "imagenet";
            document.getElementById("jobpath").value = "";

            document.getElementById("image").value = "mlcloudreg.westus.cloudapp.azure.com:5000/philly/agi-default-tf1.9.0-py36-gpu:latest";
            document.getElementById("cmd").value = "apt-get update && apt-get install -y openssh-server sudo locales && locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8 && addgroup --force-badname --gid  @ViewData["gid"] domainusers && adduser --force-badname --home /home/@ViewData["Username"] --shell /bin/bash --uid @ViewData["uid"]  -gecos '' @ViewData["Username"] --disabled-password --gid @ViewData["gid"] && adduser @ViewData["Username"] sudo && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && mkdir -p /root/.ssh && cat /work/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys && mkdir -p /home/@ViewData["Username"]/.ssh && cat /work/.ssh/id_rsa.pub >> /home/@ViewData["Username"]/.ssh/authorized_keys && chown -R @ViewData["Username"] /home/@ViewData["Username"]/.ssh/ && service ssh restart && env | while read line; do if [[ $line != HOME=* ]] && [[ $line != INTERACTIVE* ]] ; then echo \"export $line\" >> /home/@ViewData["Username"]/.bashrc; fi; done && echo \"export PATH=/usr/local/anaconda3/bin:/usr/local/nvidia/bin:$PATH\" >> /home/@ViewData["Username"]/.bashrc && echo \"export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\" >> /home/@ViewData["Username"]/.bashrc && echo \"export PATH=/usr/local/anaconda3/bin:/usr/local/nvidia/bin:$PATH\" >> /root/.bashrc && echo \"export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\" >> /root/.bashrc  && sleep infinity";
            document.getElementById("chkInteractiveJob").checked = true;
            document.getElementById("chkLogDir").checked = false;
            ShowHideDiv(document.getElementById("chkInteractiveJob"), 'interactiveportfield')
            ShowHideDiv(document.getElementById("chkLogDir"), 'logdirfield')

            document.getElementById("interactivePort").value = "22";
            document.getElementById("logdir").value = "";
            document.getElementById("runningasroot").checked = true;

        }
        else if (id == "tensorflowsshx") {
            document.getElementById("jobname").value = "tensorflow-ssh";
            document.getElementById("resourcegpu").value = 0;
            document.getElementById("workpath").value = "@ViewData["Username"]";
            document.getElementById("datapath").value = "imagenet";
            document.getElementById("jobpath").value = "";

            document.getElementById("image").value = "mlcloudreg.westus.cloudapp.azure.com:5000/philly/agi-default-tf1.9.0-py36-gpu:latest";
            document.getElementById("cmd").value = "apt-get update && apt-get install -y openssh-server sudo locales && locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8 && addgroup --force-badname --gid  @ViewData["gid"] domainusers && adduser --force-badname --home /home/@ViewData["Username"] --shell /bin/bash --uid @ViewData["uid"]  -gecos '' @ViewData["Username"] --disabled-password --gid @ViewData["gid"] && adduser @ViewData["Username"] sudo && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && mkdir -p /root/.ssh && cat /work/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys && mkdir -p /home/@ViewData["Username"]/.ssh && cat /work/.ssh/id_rsa.pub >> /home/@ViewData["Username"]/.ssh/authorized_keys && chown -R @ViewData["Username"] /home/@ViewData["Username"]/.ssh/ && apt-get install debconf-utils && echo \"keyboard-configuration  keyboard-configuration/layout   select  English (US)\" | debconf-set-selections && echo \"keyboard-configuration  keyboard-configuration/variant  select  English (US)\" | debconf-set-selections && apt-get -y install xorg openbox && echo \"X11UseLocalhost no\" | tee -a /etc/ssh/sshd_config && service ssh restart && env | while read line; do if [[ $line != HOME=* ]] && [[ $line != INTERACTIVE* ]] ; then echo \"export $line\" >> /home/@ViewData["Username"]/.bashrc; fi; done && echo \"export PATH=/usr/local/anaconda3/bin:/usr/local/nvidia/bin:$PATH\" >> /home/@ViewData["Username"]/.bashrc && echo \"export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\" >> /home/@ViewData["Username"]/.bashrc && echo \"export PATH=/usr/local/anaconda3/bin:/usr/local/nvidia/bin:$PATH\" >> /root/.bashrc && echo \"export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\" >> /root/.bashrc  && sleep infinity";
            document.getElementById("chkInteractiveJob").checked = true;
            document.getElementById("chkLogDir").checked = false;
            ShowHideDiv(document.getElementById("chkInteractiveJob"), 'interactiveportfield')
            ShowHideDiv(document.getElementById("chkLogDir"), 'logdirfield')

            document.getElementById("interactivePort").value = "22";
            document.getElementById("logdir").value = "";
            document.getElementById("runningasroot").checked = true;

        }
        else if (id == "pytorchssh") {
            document.getElementById("jobname").value = "pytorch-ssh";
            document.getElementById("resourcegpu").value = 0;
            document.getElementById("workpath").value = "@ViewData["Username"]";
            document.getElementById("datapath").value = "imagenet";
            document.getElementById("jobpath").value = "";

            document.getElementById("image").value = "mlcloudreg.westus.cloudapp.azure.com:5000/philly/pytorch04";
            document.getElementById("cmd").value = "apt-get update && apt-get install -y openssh-server sudo locales && locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8 && addgroup --force-badname --gid  @ViewData["gid"] domainusers && adduser --force-badname --home /home/@ViewData["Username"] --shell /bin/bash --uid @ViewData["uid"]  -gecos '' @ViewData["Username"] --disabled-password --gid @ViewData["gid"] && adduser @ViewData["Username"] sudo && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && mkdir -p /root/.ssh && cat /work/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys && mkdir -p /home/@ViewData["Username"]/.ssh && cat /work/.ssh/id_rsa.pub >> /home/@ViewData["Username"]/.ssh/authorized_keys && chown -R @ViewData["Username"] /home/@ViewData["Username"]/.ssh/ && service ssh restart && env | while read line; do if [[ $line != HOME=* ]] && [[ $line != INTERACTIVE* ]] ; then echo \"export $line\" >> /home/@ViewData["Username"]/.bashrc; fi; done && echo \"export PATH=/usr/local/anaconda3/bin:/usr/local/nvidia/bin:$PATH\" >> /home/@ViewData["Username"]/.bashrc && echo \"export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\" >> /home/@ViewData["Username"]/.bashrc && echo \"export PATH=/usr/local/anaconda3/bin:/usr/local/nvidia/bin:$PATH\" >> /root/.bashrc && echo \"export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\" >> /root/.bashrc  && sleep infinity";
            document.getElementById("chkInteractiveJob").checked = true;
            document.getElementById("chkLogDir").checked = false;
            ShowHideDiv(document.getElementById("chkInteractiveJob"), 'interactiveportfield')
            ShowHideDiv(document.getElementById("chkLogDir"), 'logdirfield')

            document.getElementById("interactivePort").value = "22";
            document.getElementById("logdir").value = "";
            document.getElementById("runningasroot").checked = true;

        }
        else if (id == "pytorchsshx") {
            document.getElementById("jobname").value = "pytorch-ssh";
            document.getElementById("resourcegpu").value = 0;
            document.getElementById("workpath").value = "@ViewData["Username"]";
            document.getElementById("datapath").value = "imagenet";
            document.getElementById("jobpath").value = "";

            document.getElementById("image").value = "mlcloudreg.westus.cloudapp.azure.com:5000/philly/pytorch04";
            document.getElementById("cmd").value = "apt-get update && apt-get install -y openssh-server sudo locales && locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8 && addgroup --force-badname --gid  @ViewData["gid"] domainusers && adduser --force-badname --home /home/@ViewData["Username"] --shell /bin/bash --uid @ViewData["uid"]  -gecos '' @ViewData["Username"] --disabled-password --gid @ViewData["gid"] && adduser @ViewData["Username"] sudo && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && mkdir -p /root/.ssh && cat /work/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys && mkdir -p /home/@ViewData["Username"]/.ssh && cat /work/.ssh/id_rsa.pub >> /home/@ViewData["Username"]/.ssh/authorized_keys && chown -R @ViewData["Username"] /home/@ViewData["Username"]/.ssh/ && apt-get install debconf-utils && echo \"keyboard-configuration  keyboard-configuration/layout   select  English (US)\" | debconf-set-selections && echo \"keyboard-configuration  keyboard-configuration/variant  select  English (US)\" | debconf-set-selections && apt-get -y install xorg openbox && echo \"X11UseLocalhost no\" | tee -a /etc/ssh/sshd_config && service ssh restart && env | while read line; do if [[ $line != HOME=* ]] && [[ $line != INTERACTIVE* ]] ; then echo \"export $line\" >> /home/@ViewData["Username"]/.bashrc; fi; done && echo \"export PATH=/usr/local/anaconda3/bin:/usr/local/nvidia/bin:$PATH\" >> /home/@ViewData["Username"]/.bashrc && echo \"export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\" >> /home/@ViewData["Username"]/.bashrc && echo \"export PATH=/usr/local/anaconda3/bin:/usr/local/nvidia/bin:$PATH\" >> /root/.bashrc && echo \"export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\" >> /root/.bashrc  && sleep infinity";
            document.getElementById("chkInteractiveJob").checked = true;
            document.getElementById("chkLogDir").checked = false;
            ShowHideDiv(document.getElementById("chkInteractiveJob"), 'interactiveportfield')
            ShowHideDiv(document.getElementById("chkLogDir"), 'logdirfield')

            document.getElementById("interactivePort").value = "22";
            document.getElementById("logdir").value = "";
            document.getElementById("runningasroot").checked = true;

        }
    }
</script>

<br />
<br />
<div class="modal-dialog" role="document">
    <div class="modal-content">
        <form method="POST" id="submit_job">

            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="submitModalLabel">Submit Job</h4>
            </div>

            <div class="modal-body">



                <div class="form-group">
                    <label>
                        Use Template
                    </label>
                        <br />
                        <select onchange="UseTemplate(this.value)">
                            <option value="none">None</option>
                            <option value="tensorflow">Tensorflow-IPython-GPU</option>
                            <option value="tensorflowcpu">Tensorflow-IPython-CPU</option>
                            <option value="tensorflowssh">Tensorflow-SSH</option>
                            <option value="tensorflowsshx">Tensorflow-SSH-Xserver</option>
                            <option value="pytorchssh">pytorch-SSH</option>
                            <option value="pytorchsshx">pytorch-SSH-Xserver</option>

                        </select>

</div>
                <div class="form-group">
                    <label>
                        Job Type
                    </label>
                    <br/>
                    <input type="radio" name="jobtrainingtype" id="jobtrainingtype" value="RegularJob" checked="checked"  onclick="ShowRegularJob()" /> Regular Training Job  <br />
                    <input type="radio" name="jobtrainingtype" id="jobtrainingtype" value="PSDistJob" onclick="ShowPSDistJob()" /> Distributed Training Job  <br />
                </div>

                <div class="form-group">
                    <label>
                        Job Name
                    </label>
                    <input type="text" class="form-control" id="jobname" />
                </div>

                <div class="form-group">
                    <label>
                        Docker Image
                    </label>
                    <input list="imagelist" class="form-control" name="image" id="image" />
                    <datalist id="imagelist">
                        <option value="mlcloudreg.westus.cloudapp.azure.com:5000/philly/agi-default-tf1.9.0-py36-gpu:latest" />
                        <option value="mlcloudreg.westus.cloudapp.azure.com:5000/philly/custom-tf-r1-2-ubuntu-16-04-cuda8:latest" />
                        <option value="mlcloudreg.westus.cloudapp.azure.com:5000/philly/pytorch04" />
                    </datalist>
                </div>

                <div class="form-group">
                    <label>
                        Number of GPUs
                    </label>
                    <input type="number" class="form-control" id="resourcegpu" value="1" />
                </div>


                <div id="PSDistJob" hidden>
                    <div class="form-group">
                        <label>
                            Number of Parameter Servers
                        </label>
                        <input type="number" class="form-control" id="numps" value="1" />
                    </div>
                    <div class="form-group">
                        <label>
                            Number of Workers
                        </label>
                        <input type="number" class="form-control" id="numpsworker" value="1" />
                    </div>
                </div>


                <div class="form-group">
                    <label>
                        Work Directory <font face="verdana" color="#A9A9A9">(relative to <a href="@ViewData["workPath"]">@ViewData["workPath"].ToString().Replace("file:", "").Replace("/", "\\") </a>).  </font> <br /> <font face="verdana" color="#A9A9A9"> This folder is mounted as <b>/work</b> inside container.</font>
                    </label>
                    <input type="text" class="form-control" id="workpath" />

                    
                </div>

                <div class="form-group">
                    <label>
                        Data Directory <font face="verdana" color="#A9A9A9">(relative to <a href="@ViewData["dataPath"]">@ViewData["dataPath"].ToString().Replace("file:", "").Replace("/", "\\") </a>). </font> <br /> <font face="verdana" color="#A9A9A9"> This folder is mounted as <b>/data</b> inside container.</font>
                    </label>
                    <input type="text" class="form-control" id="datapath" />
                </div>

                <div class="form-group">
                    <label>
                        Job Directory (empty by default) <br /> <font face="verdana" color="#A9A9A9"> This folder is mounted as <b>/job</b> inside container.</font>
                    </label>
                    <input type="text" class="form-control" id="jobpath" />
                </div>


                <div class="form-group">
                    <label>
                        Training Command
                    </label>
                    <textarea type="text" class="form-control" id="cmd" rows="5" > </textarea>
                </div>

                <div class="form-group">
                    <input type="checkbox" id="chkLogDir" onclick="ShowHideDiv(this,'logdirfield')" />
                    <label>
                        Enable TensorBoard
                    </label>
                    <div id="logdirfield" hidden>
                        <label>Model path:</label>
                        <input type="text" class="form-control" id="logdir" />
                    </div>
                </div>

                <div class="form-group">
                    <input type="checkbox" id="chkInteractiveJob" onclick="ShowHideDiv(this, 'interactiveportfield')" />
                    <label>
                        Interactive Job? (e.g. ipython, ssh)
                    </label>
                    <div id="interactiveportfield" hidden>
                        <label>Port used by interactive job:</label>
                        <input type="text" class="form-control" id="interactivePort" />
                    </div>
                </div>

                <div class="form-group">
                    <input type="checkbox" id="runningasroot" />
                    <label>
                        Running as ROOT. (e.g. for ssh jobs)
                    </label>
                </div>


                
                

</div>
        <div class="modal-footer">
                <input type="submit" value="Submit" name="submit" class="btn btn-success" id="submit" />
            </div>
        </form>




        <div class="form-group">
            <input type="checkbox" id="chkSaveLoadTemplate" onclick="ShowHideDiv(this, 'saveloadtemplate')" />
            <label>
                Save or Load Template from File?
            </label>
        </div>

        <div id="saveloadtemplate" hidden>
            <div class="form-group">

                <label>
                    Save the Current Template to a File:
                </label>
                <br />
                <button onclick="SaveTemplate()"> Save </button>
            </div>

            <div class="form-group">

                <label>
                    Load Template from a Saved File:
                </label>
                <input type="file" id="fileToLoad">
                <button onclick="loadFileAsText()">
                    Load
                </button>
            </div>
        </div>


    </div>
</div>
